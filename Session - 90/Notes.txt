
		     Microservices Communication

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   *********************[FeignClient]*************************
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1. Feign Client is also called as Open Feign.
2. It is 3rd party API, integrated with Spring Cloud.
3. It generates code at runtime (Dynamic Proxy class)
   which internally uses LoadBalancerClient code.
4. Programmer has to provide,
  a. one interface with abstract methods
  b. Endpoint details : Path, HttpMethods, serviceId(Provider App)
  c. Request/Response Entities/Beans need to be re-defined
  	(type of duplicate code / boiler plate code)

5. Here, we need not to use any RestTemplate. No manual code for LoadBalancer and Http calls.
************************************************************************
===Code=================================================================
3 projects
1. Eureka Server

Name : SpringCloudEurekaServer
Dep  : Eureka Server

Main : @EnableEurekaServer

application.properties
# RECOMANDED PORT NUMBER
server.port=8761

# DISABLE SELF REGISTER
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false


*******************************************************************
2. CartService
Name : SpringCloudCartService
Dep  : Spring Web, Eureka Discovery Client, Lombok

Main: @EnableEurekaClient

--application.properties--
#PORT
server.port=8081

# ServiceId (app Name)
spring.application.name=CART-SERVICE

#Provide eureka location
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# Generating Instance ID
eureka.instance.instance-id=${spring.application.name}:${random.value}


----Spring Bean---
package com.app.shivam.entity;

import lombok.Data;

@Data
public class Cart {

	private Integer cartId;
	private String cartCode;
	private Double cartCost;
}


--RestController-------
package com.app.shivam.rest;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.shivam.entity.Cart;

@RestController
@RequestMapping("/cart")
public class CartRestController {
	
	@Value("${server.port}")
	private String port;

	@GetMapping("/info")
	public ResponseEntity<String> showMessage() {
		return ResponseEntity.ok("WELCOME TO CART SERVICE =>" + port);
	}
	
	@GetMapping("/find/{id}")
	public ResponseEntity<Cart> getCartById(@PathVariable("id")Integer id) {
		Cart cart = new Cart();
		cart.setCartId(id);
		cart.setCartCost(2300.0);
		cart.setCartCode("TEST");
		return ResponseEntity.ok(cart);
	}
	
	@PostMapping("/create")
	public ResponseEntity<String> addToCart(@RequestBody Cart cart) {
		return ResponseEntity.ok("ADDED TO CART => " + cart);
	}
}


*******************************************************************
3. OrderService
Name : SpringCloudOrderService
Dep : Spring web, Eureka Discovery Client, Open Feign, Lombok

Main: @EnableEurekaClient, @EnableFeignClients

--application.properties--
#PORT
server.port=9091

# ServiceId (app Name)
spring.application.name=ORDER-SERVICE

#Provide eureka location
eureka.client.service-url.defaultZone=http://localhost:8761/eureka


--Spring Bean--------
package com.app.shivam.entity;

import lombok.Data;

@Data
public class Cart {

	private Integer cartId;
	private String cartCode;
	private Double cartCost;
}


--Consumer code--------
package com.app.shivam.consumer;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import com.app.shivam.entity.Cart;

@FeignClient("CART-SERVICE")
public interface CatConsumerFeign {

	@GetMapping("/cart/info")
	public ResponseEntity<String> showMessage();
	
	@GetMapping("/cart/find/{id}")
	public ResponseEntity<Cart> getCartById(
			@PathVariable("id")Integer id);
	
	
	@PostMapping("/cart/create")
	public ResponseEntity<String> addToCart(
			@RequestBody Cart cart);
}


--RestController-------
package com.app.shivam.rest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.shivam.consumer.CatConsumerFeign;
import com.app.shivam.entity.Cart;

@RestController
@RequestMapping("/order")
public class OrderRestController {
	
	@Autowired
	private CatConsumerFeign consumer;
	
	@GetMapping("/place")
	public ResponseEntity<String> placeOrder() {
		String cartResp = consumer.showMessage().getBody();
		return ResponseEntity.ok("ORDER PLACED WITH => " + cartResp);
	}
	
	@GetMapping("/fetch/{id}")
	public ResponseEntity<String> fetchOrderWithCart(
			@PathVariable("id") Integer id
			) 
	{
		Cart cob = consumer.getCartById(id).getBody();
		return ResponseEntity.ok("ORDER WITH CART DATA => " + cob);
	}

	@PostMapping("/addToCart")
	public ResponseEntity<String> addToCart(
			@RequestBody Cart cart
			) 
	{
		String cartResp = consumer.addToCart(cart).getBody();
		return ResponseEntity.ok("ORDER WITH => " + cartResp);
	}
}

========================================================================
--Execution Order--
1. Run Eureka Server
2. Run Cart Service (3 times with different port number)
3. Run Order Service (1 time)
4. Goto Eureka (http://localhost:8761)
5. Click on Order Service link
  May look like : http://localhost:9091/actuator/info
6. Modify Full URL of Cart service 
ex:
 http://localhost:9091/order/place

Output: Order service output ( Order Service Response + Cart Service Response)
  ORDER PLACED WITH => WELCOME TO CART SERVICE =>8083
======================================================================
Ex#2
GET http://localhost:9091/order/fetch/1190


Ex#3
POST  http://localhost:9091/order/addToCart
	Body
		raw(*)  [JSON]
{
    "cartId" : 1019,
    "cartCode" : "AA",
    "cartCost" : 9900.0
}
=======================================================================
