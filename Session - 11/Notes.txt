@Autowired :- To read object from container and link with current
		class object. [Link two object]
1. If 1 Dependency object is found , then link objects
2. If Zero Dependency objects found,
	NoSuchBeanDefinitionException
   We can use @Autowired(required=false)
        null value
-----------------------------------------
3. Multiple Dependency beans
 3.1 If Multiple Beans/Objects found
   NoUniqueBeanDefinitionException: Found multiple, expected one
 3.2 If multiple beans found, container will compare
       ReferenceVariableName = child Object Name
       DependencyName == Independent Bean name
 3.3 Selecting one Independent Bean name manually using 
	@Qualifier("objNameToBeInjected")
   If @Qualifier is used but still Bean name is not found
       NoSuchBeanDefinitionException
 3.4 Container can provide one default bean for injection
     using @Primary. Incase multiple Independent Beans found
     and having 1 object with @Primary then it is 1st priority.

     Still we can select another bean using @Qualifier to avoid
     @Primary Bean.
==========================================================
To rename a local variable at a time in all places
=> select variable => alt+shift+R => Enter new name => Press Enter key


===Full example=====================================
1. Spring Bean
package com.app;

public class MyRepository {

	private String code;

	public MyRepository() {
		super();
	}

	public String getCode() {
		return code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	@Override
	public String toString() {
		return "MyRepository [code=" + code + "]";
	}
	
	
}
---
package com.app;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class MyService {
	
	@Autowired
	//@Qualifier("m2")
	private MyRepository repo;

	@Override
	public String toString() {
		return "MyService [repo=" + repo + "]";
	}
	
	
}

2. Spring Config class
package com.app;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;

@Configuration
@ComponentScan("com.app")
public class MyAppConfig {

	//1 method = 1 object
	@Bean
	@Primary
	public MyRepository m1() {
		MyRepository m1 = new MyRepository();
		m1.setCode("A");
		return m1;
	}
	
	@Bean
	public MyRepository m2() {
		MyRepository m2 = new MyRepository();
		m2.setCode("B");
		return m2;
	}
}

3. Test class
package com.app;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Test {

	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(MyAppConfig.class);
		Object ob = ac.getBean("myService");
		System.out.println(ob);
	}
}
================================================================
****************************************************************
		Spring Bean Scope
****************************************************************
================================================================
Scope :- It indicates variable/object access limits/life time.

In Core Java:
=> Local Scope  [Block Scope]
=> Instance/Object Scope [Object creation to destroy]
=> Static Scope [class loading to unloading]

In Adv Java (servlets)
1. Page Scope (JSP)
2. Request Scope  (Until Response given)
3. Session Scope (Login -- Logout)
4. Application / Context Scope (Server startup / stop)


In Spring :
1. singleton (default scope)
	One Object is created by Spring container per configuration
	 1 <bean> = 1 object = 1 @Bean = 1 @Component
Ex:
  <bean id="a1" class="A" ..
  <bean id="a2" class="A" ..

2. prototype : Creates new object on every access.
3. request (WEB APP) : Create one new object when request comes to server
4. session (WEB APP) : Creates one new object when session is created/login success.

Q) Are singleton scope and singleton class same?
A) No.
   singleton class is a design pattern that allows 
   only one object for one class

   singleton scope is designed for Spring F/w only.
   container creates one object for 1 configuration.

Q) Which one is the default scope in Spring f/w?
A) singleton is the default.

==========Code Samples=================================
1. XML Config
<bean id="" class=""  scope="____" >
</bean>

2. Java Config
//  1 method = 1 object
 @Bean
 @Scope("__________")
 public <className> <objName>() {  ... return .... }

3. Annotation Config
 @Component
 @Scope("_____")
 class ______{ }
================================================================
