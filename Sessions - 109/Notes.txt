
1. Producer: [Spring Webflux and Reactive MongoDB API]

Step#1 Downloaded and Installed MongoDB
cmd> mongod 
cmd> mongo

Step#2 Create a Spring Boot Application
Name : SpringBootReactiveProducerEx
Dep  : Reactive Web, Reactive MongoDB, Lombok, Devtools

1. Entity
package com.app.shivam.entity;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Document //optional annotation
public class Student {

	@Id
	private String id;
	private String name;
	private Double fee;
}

2. Repository
package com.app.shivam.repo;

import org.springframework.data.mongodb.repository.ReactiveMongoRepository;

import com.app.shivam.entity.Student;

public interface StudentRepository 
	extends ReactiveMongoRepository<Student, String>{

}

3. Service
package com.app.shivam.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.app.shivam.entity.Student;
import com.app.shivam.repo.StudentRepository;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Service
public class StudentService {

	@Autowired
	private StudentRepository repo;

	public Mono<Student> save(Student student) {
		return repo.save(student);
	}

	public Mono<Student> getOne(String id) {
		return repo.findById(id).switchIfEmpty(Mono.empty());
	}

	public Flux<Student> findAll() {
		return repo.findAll().switchIfEmpty(Flux.empty());
	}

	public Mono<Void> delete(String id) {
		return repo.deleteById(id);
	}
}

4. RestController
package com.app.shivam.rest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.shivam.entity.Student;
import com.app.shivam.service.StudentService;

import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/student")
public class StudentRestController {

	@Autowired
	private StudentService service;

	@PostMapping("/create")
	public Mono<Student> save(@RequestBody Student student) {
		return service.save(student);
	}
}


5. Properties file
#Server Port
server.port=9090

#Database connection details
spring.data.mongodb.host=localhost
spring.data.mongodb.database=bootdb
spring.data.mongodb.port=27017
#spring.data.mongodb.username=
#spring.data.mongodb.password=

****************************************************
> first run cmd "mongod" then start application
> Test using POSTMAN

****************************************************

Note: Here PK type is String by default (we can change it)
It generates PK as HexaDecimal value (UUID internally)
ex:
"id": "63d48120435d697460977319"

*) PK Field name is taken as _id in Database
*) If we find _class property then it indicates data came from 
	external sources (like Java, .Net ..etc)
*) If we use any other DataType for PK in coding then value will never
	be generated. We need to pass manual value.

2. Consumer: [ Spring Webflux - WebClient ]