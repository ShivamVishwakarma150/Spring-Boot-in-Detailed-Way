			Global Data Formats (XML/JSON)

*) Incase of complex data inputs/outputs like JSON/XML, we use
   MediaType annotations.

1.  @RequestBody : It will read Http Request Body Section, checks
			Content-type -> read data from Body -> Convert to
			   one Object -> Give it as method param.
2.  @ResponseBody: It will write Http Response Body Section,
    If return type is non-String type(ClassType, CollectionType)
     then object -> Global Data -> given to Response Body and also updates Content-type.

*)Note:
1. These annotations are applicable only if we work on non-String types
  (ex: Employee, List<Product> ..etc)

2. Validation of data (request) is done by annotations.
3. Only by default JSON (JACKSON) Conversions are supported.
   No XML by default in Spring boot.

4.**** When we add @RestController by default it internally adds
   @ResponseBody.

===============================================================
JSON Syntax:

a) For one Object: { "key":val, "key":val }

b) For one List/Array/Set :
[
  element1, element2,...
]

c) For one Map/Properties :
{
   "key":val, "key":val
}

===========Working with output (@ResponseBody) ==================
Name : SpringBootRestJSONOutput
Dep  : Spring web, Lombok, Devtools

1. Entity classes
package com.app.shivam.entity;

import java.util.Map;
import java.util.Set;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {

	@JsonProperty("user-unq-id")
	private Integer userId;
	
	@JsonProperty("user-first-name")
	private String userName;
	
	private String userRole;
	
	@JsonIgnore
	private String password;
	
	private Set<String> permissions; 
	//private List<String> permissions; 
	//private String[] permissions; 
	
	private Map<String,String> models;
	//private Properties models;
	
	
}

-------Role Entity-----------
package com.app.shivam.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Role {

	private Integer roleId;
	private String roleCode;
}

2. RestController class
package com.app.shivam.rest;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.shivam.entity.Role;
import com.app.shivam.entity.User;

@RestController
@RequestMapping("/user")
public class UserRestController {

	@GetMapping("/one")
	//@ResponseBody
	public ResponseEntity<User> getOneObj() {
		User ob = new User(101, "ABC",  "Dev", "PASSWD1234",
				Set.of("P1","P2"),
				Map.of("M1","AA","M2","AB")
				);
		
		ResponseEntity<User> response = new ResponseEntity<>(ob, HttpStatus.OK);
		return response;
	}
	
	@GetMapping("/list")
	public ResponseEntity<List<Role>> getAllRoles() {
		List<Role> roles = Arrays.asList(
					new Role(1100, "ADMIN"),
					new Role(1102, "BA"),
					new Role(1103, "QA")
				);
		
		ResponseEntity<List<Role>> response = new ResponseEntity<>(roles, HttpStatus.OK);
		return response;
	}
	
	@GetMapping("/map")
	public ResponseEntity<Map<String,Role>> getMappedRoles() {
		Map<String,Role> rolesMap = Map.of(
					"R1", new Role(1100, "ADMIN"),
					"R2", new Role(1102, "BA"),
					"R3", new Role(1103, "QA")
				);
		
		ResponseEntity<Map<String,Role>> response = new ResponseEntity<>(rolesMap, HttpStatus.OK);
		return response;
	}
	
	
	
	
}

URLS:
http://localhost:9090/user/one
http://localhost:9090/user/list
http://localhost:9090/user/map
=======================================================================
Note:
1. Use @JsonIgnore to avoid a variable/field in JSON operations
  (used in project)

2. @JsonProperty to give alias names to variables. 

=======================================================================
Q) Write one Example using Maven for JSON/JACKSON?

Q) Do we need to apply @ResponseBody in Spring boot rest ?
A) Not required. By default @RestController gives it.

Q) How can we avoid one field/variable in JSON operations?
A) @JsonIgnore

Q) What will happen if variable holds null and in JSON Operations?
A) null is printed.

Q) how can we provide alias names to variables in JSON?
A) @JsonProperty
=================================================================
			Working with XML

Step#1 Add Dependency

<dependency>
	<groupId>com.fasterxml.jackson.dataformat</groupId>
	<artifactId>jackson-dataformat-xml</artifactId>
</dependency>

Step#2 While Making Request, send one Header Param
    Accept = application/xml

*) Note: If Dependency is not added, then Accept Request may get
   Response code as : 406 Not Acceptable
----------------------------------------------------------------------