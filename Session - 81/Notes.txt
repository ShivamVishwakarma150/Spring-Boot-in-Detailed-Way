
		       Spring Boot - Redis Cache

*) Problem:
 If No.of Network calls Between Server(App) and Database are increased
 then that results application performance down.
 (Which takes more time to execute all N/w calls)

*) Cache : It is a process of storing data at server side to reduce
  no.of network calls for commonly accessed data.

Like Top 50 Emails, Top 30 user posts, commonly searched mobiles,..etc

-> Cache Exist at server side.
-> Cache is a also one type of database.
-> Cache reduces network calls from 100% to 80%/90%/99%...etc
-> Cache can store any type of objects(products, Inbox...etc)
-> Cache is handled by Operations (getOne/updateOne/deleteOne)
  ie Cache and DB must be in Sync.
-> Cache should never be used to store all DB Data.
   (dont use for findAll() and save() operations)
=================================================================
*) Redis (NoSQL Database/Cache/Message Queues)
=> Redis Open Source Vendor provides Cache concept integrated with
   Spring Boot. 

=> To use Redis Cache concept in Spring boot we need to add 
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>

=> Also we need to run Redis Server (local/cloud)
https://github.com/tporadowski/redis/releases

=> Download Redis server from above link
=> Extract to a folder and double click "redis-server"
=> In Spring Boot application we need to provide details like:

Type : Redis cache
IP   : localhost / 192.168.63.12(ex)
PORT : 6379

===Coding PART=================================
@EnableCaching : To Activate Cache Concept (add at Main class)

@Cacheable  : Store object in cache  [find/get]
@CachePut   : Modify existed object in cache  [update]
@CacheEvict : Remove existed object from cache [remove/delete]

=> For Every cache type we need to provide one namespace and key
   to put/delete/get operations.

=> class must implement Serializable (I), bcoz this is writing/reading
   object to/from network.
=============Code===================================================
Name : SpringBootRestRedisCacheEx
Dep: Web, Lombok, DevTools, Data JPA, MySQL, Redis

> At main class:  @EnableCaching

> application.properties
# Server 
server.port=9090

#Cache details
spring.cache.type=redis
spring.redis.host=localhost
spring.redis.port=6379

#Database Connection
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/boot7am
spring.datasource.username=root
spring.datasource.password=root

# JPA Details
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=create
-----------------------------------------------
> Entity class : Must implement Serializable interface.

package com.app.shivam.entity;

import java.io.Serializable;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

import lombok.Data;

@Data
@Entity
public class User implements Serializable {

	private static final long serialVersionUID = 1L;
	
	@Id
	@GeneratedValue
	private Integer id;
	private String name;
	private String role;
}
-------------Repository------------------------------
package com.app.shivam.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import com.app.shivam.entity.User;

public interface UserRepository extends JpaRepository<User, Integer>{

}

------------------Service--------------------------------------
package com.app.shivam.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import com.app.shivam.entity.User;
import com.app.shivam.repo.UserRepository;

@Service
public class UserService {

	@Autowired
	private UserRepository repo;

	public Integer saveUser(User user) {
		return repo.save(user).getId();
	}

	@Cacheable(value = "users", key = "#userId")
	public User getOneUser(Integer userId) {
		return repo.findById(userId).get();
	}

	@CachePut(value = "users", key = "#userId")
	public void updateUser(Integer userId, User user) {
		User userDb = repo.findById(userId).get();
		userDb.setName(user.getName());
		userDb.setRole(user.getRole());
		repo.save(userDb);
	}

	@CacheEvict(value = "users", allEntries = true)
	public void deleteUser(Integer userId) {
		repo.deleteById(userId);
	}

}
---------------------RestController---------------------------
package com.app.shivam.rest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.shivam.entity.User;
import com.app.shivam.service.UserService;

@RestController
@RequestMapping("/v1/api/users")
public class UserRestController {

	@Autowired
	private UserService service;
	
	@PostMapping("/create")
	public String createUser(@RequestBody User user) {
		Integer id = service.saveUser(user);
		return "User '"+id+"' created!";
	}
	
	@GetMapping("/find/{id}")
	public User findOneUser(@PathVariable Integer id) {
		return service.getOneUser(id);
	}
	
	@DeleteMapping("/remove/{id}")
	public String deleteUser(@PathVariable Integer id) {
		service.deleteUser(id);
		return "User Deleted!";
	}
	
	@PutMapping("/modify")
	public String updateUser(@RequestBody User user) {
		service.updateUser(user.getId(), user);
		return "User Updated!";
	}
	
	
}
============================================================
POSTMAN REQUEST:
1. CREATE ONE ROW
POST  http://localhost:9090/v1/api/users/create
	Body
		(*) raw [JSON]
{
    "name" : "RAJ",
    "role" : "HR"
}

2. FETCH ONE ROW MULTIPLE TIME
GET http://localhost:9090/v1/api/users/find/1

Q) What is the use of Cache?
A) To reduce network calls between app and db, that stores common accessed
  data

Q) Can we implement cache for all operations/findAll ?
A) No. Use cache for getOne, delete, updateOne

Q) What are caching annotations given by Spring Boot ?
A)

Q) Which Cache vendor you implemented in Application?
A) Redis

*) if a object/data is cached, it wont be removed until CacheEvit is
   called. ie never remove default. 
*) We can use key "spring.cache.redis.time-to-live". SO that after
   some time object is removed from cache(not from DB)

ex: 
  spring.cache.redis.time-to-live=60000