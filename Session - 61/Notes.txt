
		    Spring Boot Restful Webservices

*) By Using Spring Boot Restful webservices we can develop both Producer and Consumer applications.

*) Producer application work flow:
1. Every request is taken by FC(FrontController) which is a
	   Servlet (DispatcherServlet).

2. FC provides Request details (PATH/Http Method) to HandlerMapper
   that returns RestController#Method details
   (ex: PaymentRestController#doPay)

3. Once it gets executed output will be ResponseEntity<T>
   (Other ReturnType: String, ClassType, Collection).

4. This ResponseEntity is given back to FC and same sent to clientapp.

*) Note:
1. There is NO UI at Producer App for webservices concept.
2. Data Formats are (request/response): Text, JSON, XML
3. No ViewResolver is required to configure.
4. For both Spring boot WEB MVC and Spring boot ReST
   we have to use same dependency "Spring Boot WEB"
   that comes with default server "Tomcat" with default port:9696
5. Browser supports making GET and POST request only.
   So, for Testing purpose we use a Tool "POSTMAN".
Download Link:
https://www.postman.com/downloads/

 +----------------------------+----------------------------------------+	
 |	Controller            |         RestController                 |
 +----------------------------+----------------------------------------+
   This is for WEB MVC Apps          This is for RestBased Apps

   It is connected with View        Here, we have no View(UI Concept)
  (UI/Java based-JSP/Thymeleaf)

   Data is Exchanged using Objects    Data is Exchanged using XML/JSON
    between UI and Controller             with Consumer Apps.
    (Model/ModelAttribute..etc)

   It is a full web-app developing   It is like a service Provider
      concept.                          must be used by a client.
      						(Any Language)
 +----------------------------+----------------------------------------+
Spring Boot Rest Annotations:
1. @RestController : We need to apply this at class level
2. @RequestMapping : At class/ method level too.
3. @GetMapping      
4. @PostMapping
5. @PutMapping
6. @PatchMapping
7. @DeleteMapping
8. @PathVariable  : URL Input (Similer to Request Param)
9. @HeaderParam   : to read Request Header parameters
10. @RequestBody  : Request(JSON/XML) ---> Object (Method Input)
11. @ResponseBody : Object (Method Return) ---> Response(JSON/XML)
========================================================================
	First Application : Spring Boot Rest Producer Application


*) HttpStatus is a enum that gives all Http Response Status codes to be returned with Response Object.

200 - OK  (success)
400 - Bad Request (Client data is missing/not valid)
404 - Not Found (Invalid URL)
405 - Method Not Allowed (URL is valid, but not Http Method type)
500 - Internal Server Error (Exception at Server side)


App/Coding Steps:-
1. Create one Spring Boot Application
Name: SpringBootRestProducerFirstEx
Dep : Spring Web, Devtools

2. RestController
package com.app.shivam.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/product")
public class ProductRestController {

	//1. Fetch Resource
	//@RequestMapping(value = "/fetch",method = RequestMethod.GET)
	@GetMapping("/fetch")
	public ResponseEntity<String> getProduct() {
		ResponseEntity<String> response = new ResponseEntity<>(
				"FROM GET OPERATION",  //body
				HttpStatus.OK);        //status (OK/200)
		
		return response;
	}
	
	
	//2. Create Resource
	@PostMapping("/save")
	public ResponseEntity<String> createProduct() {
		ResponseEntity<String> response = new ResponseEntity<>(
				"FROM POST OPERATION",
				HttpStatus.OK
				);
		return response;
	}
	
	
	//3. Modify Resource
	@PutMapping("/update")
	public ResponseEntity<String> updateProduct() {
		ResponseEntity<String> response = new ResponseEntity<>(
				"FROM PUT OPERATION",
				HttpStatus.OK
				);
		return response;
	}
	
	//4. Remove Resource
	@DeleteMapping("/remove")
	public ResponseEntity<String> deleteProduct() {
		ResponseEntity<String> response = new ResponseEntity<>(
				"FROM DELETE OPERATION",
				HttpStatus.OK
				);
		return response;
	}
	
	
	//5. Partial Update of Resource
	@PatchMapping("/updatecost")
	public ResponseEntity<String> modifyProductCost() {
		ResponseEntity<String> response = new ResponseEntity<>(
				"FROM PATCH OPERATION",
				HttpStatus.OK
				);
		return response;
	}
	
	
}

3. Run Main class and Test from POSTMAN

[GET] http://localhost:9696/product/fetch	[SEND]
[POST] http://localhost:9696/product/save	[SEND]
[PUT] http://localhost:9696/product/update	[SEND]
[DELETE] http://localhost:9696/product/remove	[SEND]
[PATCH] http://localhost:9696/product/updatecost[SEND]

--Task----------------------------------------------------
Write one simple REST API For Student that will display simple messages
for GET, POST, PUT, DELETE, PATCH.
=====================================================================
Q) how can we switch to some other servers from tomcat?
How can we remove embedded tomcat from Spring Boot application?

Step#1 Remove embedded tomcat
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

Step#2 Add other server
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-undertow</artifactId>
		</dependency>

		(or)

	 <dependency>
		<groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-starter-jetty</artifactId>
	 </dependency>
====================================================================
